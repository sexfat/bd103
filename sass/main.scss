@import "base/reset";
@import "base/var";
@import "base/font";
@import "mixins/rwd";
@import "layout/header";
@import "mixins/push";
@import "respond/desktop";
@import "respond/medium";
@import "respond/small";
.box {
    margin: $num;
    padding: $num;
}

.box1 {
    margin: 40 + 10 + em;
    width: 40px + 10px;
    padding: 40 + 50px;
    padding: $num + $num1;
}

.box2 {
    margin: 40 * 40 + px;
    width: $num * $num1;
    padding: 40 * 10em;
}

.box3 {
    font: (40px / 10px);
    width: $num / $num1;
}

h2 {
    font-size: (10px + 30px) * 5;
}

.box {
    background-color: #111111 * 5;
}

.box4 {
    width: ceil(10.1);
    width: round(10.4);
    width: floor(10.9);
}

h1 {
    font-size: $font-base * 5;
}

h2 {
    font-size: floor($font-base * 4.5);
}

h3 {
    font-size: floor($font-base * 3);
}

h4 {
    font-size: floor($font-base * 2.6);
}

h5 {
    font-size: floor($font-base * 1.6);
}

// @for $i from 1 through 20 {
//     .col_#{$i} {
//         width: $i * 1px;
//     }
// }
// $var_num: 10;
//   @for $i from 1 through $var_num {
//     .col_#{$i}{
//         width: $i * 1px ;
//     }
//   }
// }
@mixin for_col($num) {
    @for $i from 1 through $num {
        .col_#{$i} {
            width: $i * 1px;
        }
    }
}

@mixin for_col_class($classname, $num) {
    @for $i from 1 through $num {
        .#{$classname}_#{$i} {
            width: $i * 1px;
        }
    }
}

@include for_col(20);
@include for_col_class(names, 100);
@mixin push-left ($num) {
    @for $i from 1 through $num {
        .margin-left-#{$i} {
            margin-left: $i + px;
        }
    }
}

// @include push (right, 100);
// @include push (bottom, 200);
// @include push-left (100);
$theme: yellow;
@if $theme==blue {
    .theme_blue {
        color: blue;
    }
}

@else if $theme==yellow {
    .theme_yellow {
        color: yellow;
    }
}

@mixin theme-color ($theme) {
    @if $theme==blue {
        .theme_blue {
            @content color: blue;
        }
    }
    @else if $theme==yellow {
        .theme_yellow {
            @content;
            color: yellow;
        }
    }
    @else {
        .theme_other {
            @content;
            color: green;
        }
    }
}

@include theme-color(other) {
    margin: 10px;
    padding: 10px;
}

@mixin img_url($name) {
    @each $filename in $name {
        .#{$filename} {
            background-image: url('img/#{$filename}.jpg');
            width: 100%;
        }
    }
}

@include img_url([a1,a2,a3,a4,a5]);
@each $filename in a1,
a2,
a3,
a4 {
    .#{$filename} {
        background-image: url('img/#{$filename}.jpg');
        width: 100%;
    }
} // 
@each $title_font,
$size in (h1: 4em,
h2: 3.5em,
h3:3em,
h4:2.3em) {
    #{$title_font} {
        font-size: $size;
    }
}

@mixin grid-col($col) {
    @for $i from 1 through $col {
        .col-md-#{$i} {
            width: ($i /$col) *100%;
        }
    }
}

@mixin area($width,
$height) {
    height: $height + px;
    width: $width + px;
}

@include grid-col(24);
.box_color {
    // background-color: #16f002;
    // background-color: darken(#16f002 , 10);
    @include area(300,
    50); // height: 300px;
    // width: 50px;
}

//
@mixin color_lighten($color,
$amount) {
    @for $i from 1 through $amount {
        .color_lighten_#{$i} {
            background-color: lighten($color, $i*3);
            height: 50px;
            width: 300px;
        }
    }
}

//
@mixin color_darken($color,
$amount) {
    @for $i from 1 through $amount {
        .color_darken_#{$i} {
            background-color: darkten($color, $i*3);
            height: 50px;
            width: 300px;
        }
    }
} // @include color_lighten(rgb(1, 75, 69), 10);
// @include color_darken(rgb(1, 75, 69), 10);
@mixin color-gradient($tone,
$color,
$amount,
$width:300,
$height:50) {
    @if ($tone==light) and ($amount < 20) {
        @for $i from 1 through $amount {
            .color_#{$tone}_#{$i} {
                background-color: lighten($color, $i*5);
                @include area ($width,
                $height);
            }
        }
    }
    @else if($tone==darken) and ($amount < 20) {
        @for $i from 1 through $amount {
            .color_#{$tone}_#{$i} {
                background-color: darkten($color, $i*5);
                @include area ($width,
                $height);
            }
        }
    }
}

@include color-gradient(darken,
#16f002,
19,
400,
30);
@mixin layout ($class,
$direction,
$width,
$height) {
    .#{$class} {
        float: $direction;
        @include area($width,
        $height);
        min-height: 1px;
        display: inline-block;
        &:after {
            content: '';
            clear: both;
        }
    }
}

@include layout (box1,
left,
400px,
40px);
@include layout (space,
right,
100px,
20px);
.wrapper {
    @include layout (space,
    right,
    100px,
    20px);
}

@mixin layout-block($choice,
$class,
$direction,
$width,
$height) {
    @if $choice==yes {
        .#{$class} {
            float: $direction;
            @include area($width,
            $height);
            min-height: 1px;
            display: inline-block;
            &:after {
                content: '';
                clear: both;
            }
        }
    }
    @else {
        .#{$class} {
            @include area($width,
            $height);
            min-height: 1px;
        }
    }
}

@include layout-block(none,
dir,
left,
400,
30);
$map: ( key : 5px 20px 40px 50px,
key2: 10px,
key3: 20px,
key4: 30px,
content: 'hi world!!',
);
.box {
    margin: map-get($map, key2);
    content: map-get($map, content);
}

$list: 100 30 40 50 60;
.boxs {
    padding: length($list);
    margin: nth($list, 3);
}

$breakpoint: ( 
small: 480px,
medium: 720px,
desktop: 1366px,
);



@mixin respond-each ($respond) {
    @each $viewpoint,
    $num in $breakpoint {
        @if $respond == $viewpoint {
            @media all and (min-width: $num) {
                @content;
            }
        }
    }
}


@include respond-each(medium){
  .box {
      width: 80%;
  }
}

@include respond-each(desktop){ 
      .box {
          width: 100%;
      }
};


@include respond-each(small){ 
    .box {
        width: 60%;
    }
};




